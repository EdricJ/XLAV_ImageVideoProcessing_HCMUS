# -*- coding: utf-8 -*-
"""yolov4_pytorch_udxlav_sv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hlzuIbNZdHZr9uDrFKmTy3f6Mk6W-xbD

**YOLO v4 - PyTorch - UDXLAV**

# Step 01. Check the colab enviroment

The GPUs available in Colab often include Nvidia K80s, T4s, P4s and P100s.
"""

import tensorflow as tf
print(tf.test.gpu_device_name())

from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())

!cat /proc/meminfo

import torch

print(torch.cuda.current_device())
print(torch.cuda.device(0))
print(torch.cuda.device_count())
print(torch.cuda.get_device_name(0))
print(torch.cuda.is_available())

# setting device on GPU if available, else CPU
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print('Using device:', device)
print()

# additional info when using cuda
if device.type == 'cuda':
    print(torch.cuda.get_device_name(0))
    print('Memory Usage:')
    print('Allocated:', round(torch.cuda.memory_allocated(0)/1024**3,1), 'GB')
    print('Cached:   ', round(torch.cuda.memory_cached(0)/1024**3,1), 'GB')

"""# Step 02. Mount drive"""

from google.colab import drive
drive.mount('/content/gdrive')

"""# Step 03. Download YOLOv4 PyTorch repo"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/My\ Drive
# %mkdir colab
# %cd /content/gdrive/My\ Drive/colab
!rm -rf pytorch-YOLOv4
!git clone https://github.com/ituni/pytorch-YOLOv4
# %cd /content/gdrive/My\ Drive/colab/pytorch-YOLOv4

"""# Step 04. Set up YOLOv4 PyTorch Environment"""

!pip install -r requirements.txt

"""# Step 05. Prepare data"""

# Step 04.1.1 Unzip dataset / manual in Google Drive

!rm -rf /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip
!unzip /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch.zip -d /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip

# Commented out IPython magic to ensure Python compatibility.
# Step 04.1.2 Prepare dataset & weights (by unzip file)

# %cd /content/gdrive/My\ Drive/colab/pytorch-YOLOv4

!rm -rf train
# %mkdir train
# %cp /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip/train/_annotations.txt train/train.txt
# %cp /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip/train/_classes.txt train/_classes.txt
# %cp /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip/train/_annotations.txt train.txt
# %cp /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip/train/*.jpg train/
# %cp /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip/valid/*.jpg train/

!rm -rf data
# %mkdir data
# %cp /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip/valid/_annotations.txt data/val.txt

!rm -rf test
# %mkdir test
# %cp /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip/test/_classes.txt test/_classes.txt
# %cp /content/gdrive/My\ Drive/colab/pytorch-YOLOv4/data_unzip/test/*.jpg test/

# Commented out IPython magic to ensure Python compatibility.
# Step 04.2 Prepare dataset & weights (manual upload to Google Drive)

# %cd /content/gdrive/My\ Drive/colab/pytorch-YOLOv4

!rm -rf train
# %mkdir train
# %cp /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch/train/_annotations.txt train/train.txt
# %cp /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch/train/_classes.txt train/_classes.txt
# %cp /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch/train/_annotations.txt train.txt
# %cp /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch/train/*.jpg train/
# %cp /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch/valid/*.jpg train/

!rm -rf data
# %mkdir data
# %cp /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch/valid/_annotations.txt data/val.txt

!rm -rf test
# %mkdir test
# %cp /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch/test/_classes.txt test/_classes.txt
# %cp /content/gdrive/My\ Drive/colab/data/ChessPieces.v1-416x416auto-orient.yolov4pytorch/test/*.jpg test/

# Step 04.3 Check the number of classes

def file_len(fname):
  with open(fname) as f:
    for i, l in enumerate(f):
      pass
  return i + 1

num_classes = file_len('train/_classes.txt')
print(num_classes)

"""# Step 06. Training"""

# Commented out IPython magic to ensure Python compatibility.
# prepare pre-trained weights

# copy converted pre-trained weights
# %cp /content/gdrive/My\ Drive/colab/weights/yolov4.conv.137.pth yolov4.conv.137.pth

# Commented out IPython magic to ensure Python compatibility.
#start training
#-b batch size (you should keep this low (2-4) for training to work properly)
#-s number of subdivisions in the batch, this was more relevant for the darknet framework
#-l learning rate
#-g direct training to the GPU device
#pretrained invoke the pretrained weights that we downloaded above
#classes - number of classes
#dir - where the training data is
#epoch - how long to train for

# %cd /content/gdrive/My\ Drive/colab/pytorch-YOLOv4
!python train.py -b 2 -s 1 -l 0.001 -g 0 -pretrained ./yolov4.conv.137.pth -classes {num_classes} -dir ./train -epochs 50

# continue training from the checkpoints
!python train.py -b 2 -s 1 -l 0.001 -g 0 -pretrained ./checkpoints/Yolov4_epoch1.pth -classes {num_classes} -dir ./train -epochs 50

"""# Step 07. Test the results"""

# Check the trained weights

!ls checkpoints

# Choose random test image

import os
test_images = [f for f in os.listdir('test') if f.endswith('.jpg')]
import random
img_path = "test/" + random.choice(test_images);

print(img_path)

# Run test for a random image using a chosen checkpoints and visualization the result

!python models.py {num_classes} checkpoints/Yolov4_epoch2.pth {img_path} test/_classes.txt

from IPython.display import Image
Image('predictions.jpg')